# SPDX-License-Identifier: GPL-2.0-only
menu "Clang's source-based kernel coverage measurement (EXPERIMENTAL)"

config ARCH_HAS_LLVM_COV
	bool

config ARCH_HAS_LLVM_COV_PROFILE_ALL
	bool

config LLVM_COV_KERNEL
	bool "Enable Clang's source-based kernel coverage measurement"
	depends on DEBUG_FS
	depends on ARCH_HAS_LLVM_COV
	depends on CC_IS_CLANG && CLANG_VERSION >= 180000
	default n
	help
	  This option enables Clang's Source-based Code Coverage.

	  If unsure, say N.

	  On a kernel compiled with this option, run your test suites, and
	  download the raw profile from /sys/kernel/debug/llvm-cov/profraw.
	  This file can then be converted into the indexed format with
	  llvm-profdata and used to generate coverage reports with llvm-cov.

	  Additionally specify CONFIG_LLVM_COV_PROFILE_ALL=y to get profiling
	  data for the entire kernel. To enable profiling for specific files or
	  directories, add a line similar to the following to the respective
	  Makefile:

	  For a single file (e.g. main.o):
	          LLVM_COV_PROFILE_main.o := y

	  For all files in one directory:
	          LLVM_COV_PROFILE := y

	  To exclude files from being profiled even when
	  CONFIG_LLVM_COV_PROFILE_ALL is specified, use:

	          LLVM_COV_PROFILE_main.o := n
	  and:
	          LLVM_COV_PROFILE := n

	  Note that a kernel compiled with coverage flags will be significantly
	  larger and run slower.

	  Note that the debugfs filesystem has to be mounted to access the raw
	  profile.

config LLVM_COV_PROFILE_ALL
	bool "Profile entire Kernel"
	depends on !COMPILE_TEST
	depends on LLVM_COV_KERNEL
	depends on ARCH_HAS_LLVM_COV_PROFILE_ALL
	default n
	help
	  This options activates profiling for the entire kernel.

	  If unsure, say N.

	  Note that a kernel compiled with profiling flags will be significantly
	  larger and run slower.

config LLVM_COV_KERNEL_MCDC
	bool "Enable measuring modified condition/decision coverage (MC/DC)"
	depends on LLVM_COV_KERNEL
	depends on CLANG_VERSION >= 180000
	help
	  This option enables modified condition/decision coverage (MC/DC)
	  code coverage instrumentation.

	  If unsure, say N.

	  This will add Clang's Source-based Code Coverage MC/DC
	  instrumentation to your kernel. As of LLVM 19, certain expressions
	  are still not covered, and will produce build warnings when they are
	  encountered.

	  "[...] if a boolean expression is embedded in the nest of another
	   boolean expression but separated by a non-logical operator, this is
	   also not supported. For example, in
	   x = (a && b && c && func(d && f)), the d && f case starts a new
	   boolean expression that is separated from the other conditions by the
	   operator func(). When this is encountered, a warning will be
	   generated and the boolean expression will not be instrumented."

	   https://clang.llvm.org/docs/SourceBasedCodeCoverage.html#mc-dc-instrumentation

config LLVM_COV_KERNEL_MCDC_MAX_CONDITIONS
	int "Maximum number of conditions in a decision to instrument"
	range 6 32767
	depends on LLVM_COV_KERNEL_MCDC
	depends on CLANG_VERSION >= 190000
	default "6"
	help
	  This value is passed to "-fmcdc-max-conditions" flag of Clang cc1.
	  Expressions whose number of conditions is greater than this value will
	  produce warnings and will not be instrumented.

endmenu
